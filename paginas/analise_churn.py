import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
import matplotlib.pyplot as plt
import seaborn as sns
import pickle
import os
from datetime import datetime
from utils.KPIs import load_data, calculate_churn_features, define_churn
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import precision_recall_curve, roc_curve, auc
from imblearn.over_sampling import SMOTE
from imblearn.under_sampling import RandomUnderSampler

def app():
    # Configura√ß√£o da p√°gina
    #st.set_page_config(layout="wide")
    
    # T√≠tulo principal com √≠cone
    st.title("üîÑ An√°lise de Churn")
    
    # Adicionar abas para diferentes funcionalidades
    tab1, tab2, tab3, tab4 = st.tabs([
        "üìä Vis√£o Geral", 
        "‚öôÔ∏è Configurar An√°lise", 
        "üìà Resultados do Modelo", 
        "üîÆ Previs√£o"
    ])
    
    # Carregar dados
    df = load_data()
    
    # TAB 1: VIS√ÉO GERAL
    with tab1:
        # Cabe√ßalho com descri√ß√£o
        st.header("üìä Vis√£o Geral do Churn")
        
        # Layout em duas colunas para o conte√∫do principal
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.markdown("""
            <div style="background-color: #f0f2f6; padding: 20px; border-radius: 10px; margin-bottom: 20px;">
                <h3 style="margin-top: 0;">O que √© Churn?</h3>
                <p>O churn (cancelamento) √© um indicador cr√≠tico para neg√≥cios, pois indica a taxa com que os clientes 
                param de comprar ou usar os servi√ßos. Monitorar e prever o churn permite que empresas tomem medidas 
                proativas para reter clientes valiosos.</p>
            </div>
            """, unsafe_allow_html=True)
            
            # Exibir distribui√ß√£o de compras ao longo do tempo
            st.subheader("üìÖ Distribui√ß√£o de Compras ao Longo do Tempo")
            
            monthly_orders = df.groupby(pd.to_datetime(df['order_purchase_timestamp']).dt.to_period('M'))['order_id'].count().reset_index()
            monthly_orders['order_purchase_timestamp'] = monthly_orders['order_purchase_timestamp'].astype(str)
            
            fig = px.line(
                monthly_orders, 
                x='order_purchase_timestamp', 
                y='order_id',
                title="N√∫mero de Pedidos por M√™s",
                labels={'order_purchase_timestamp': 'M√™s', 'order_id': 'N√∫mero de Pedidos'}
            )
            fig.update_layout(
                xaxis=dict(tickangle=45),
                yaxis=dict(title="N√∫mero de Pedidos"),
                plot_bgcolor='rgba(0,0,0,0)',
                paper_bgcolor='rgba(0,0,0,0)',
            )
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            # Mostrar informa√ß√µes b√°sicas dos dados
            st.subheader("üìã Informa√ß√µes dos Dados")
            
            max_date = pd.to_datetime(df['order_purchase_timestamp']).max()
            min_date = pd.to_datetime(df['order_purchase_timestamp']).min()
            total_customers = df['customer_unique_id'].nunique()
            total_orders = df['order_id'].nunique()
            
            st.markdown(f"""
            <div style="background-color: #f0f2f6; padding: 20px; border-radius: 10px; margin-bottom: 20px;">
                <p><strong>Per√≠odo dos Dados:</strong> {min_date.strftime('%d/%m/%Y')} a {max_date.strftime('%d/%m/%Y')}</p>
                <p><strong>Total de Clientes:</strong> {total_customers:,}</p>
                <p><strong>Total de Pedidos:</strong> {total_orders:,}</p>
            </div>
            """, unsafe_allow_html=True)
            
            # Verificar se o modelo j√° foi treinado
            model_exists = os.path.exists('churn_model.pkl')
            results_exist = os.path.exists('churn_analysis_results.txt')
            
            if results_exist:
                st.success("‚úÖ Um modelo de churn j√° foi treinado. Veja os resultados na aba 'Resultados do Modelo'.")
                
                # Extrair informa√ß√µes b√°sicas do arquivo de resultados
                with open('churn_analysis_results.txt', 'r') as f:
                    results_text = f.read()
                    
                # Procurar taxa de churn
                churn_rate_line = [line for line in results_text.split('\n') if "Taxa de churn:" in line]
                if churn_rate_line:
                    churn_rate = churn_rate_line[0].split(": ")[1]
                    st.info(f"üìä A taxa de churn atual √© de {churn_rate}")
            else:
                st.warning("‚ö†Ô∏è Nenhum modelo de churn foi treinado ainda. Acesse a aba 'Configurar An√°lise' para criar um modelo.")
            
            # Exemplo ilustrativo de como funciona a defini√ß√£o de churn
            st.subheader("‚ÑπÔ∏è Como Funciona a Defini√ß√£o de Churn")
            
            st.markdown("""
            <div style="background-color: #f0f2f6; padding: 20px; border-radius: 10px; margin-bottom: 20px;">
                <p>Para esta an√°lise, consideramos:</p>
                <ul>
                    <li><strong>Data de corte padr√£o:</strong> 17 de abril de 2018 (6 meses antes do final dos dados)</li>
                    <li><strong>Clientes com churn (1):</strong> Aqueles que n√£o compraram ap√≥s a data de corte</li>
                    <li><strong>Clientes sem churn (0):</strong> Aqueles que compraram ap√≥s a data de corte</li>
                </ul>
            </div>
            """, unsafe_allow_html=True)
        
        # Exemplo ilustrativo de como funciona a defini√ß√£o de churn
        st.subheader("üìù Exemplo de Defini√ß√£o de Churn")
        
        example_data = pd.DataFrame({
            'Cliente': ['Cliente A', 'Cliente B', 'Cliente C', 'Cliente D'],
            '√öltimas Compras': [
                'Jan/2018, Mar/2018, Mai/2018, Jul/2018', 
                'Jan/2018, Fev/2018, Mar/2018',
                'Dez/2017, Fev/2018, Set/2018',
                'Nov/2017, Jan/2018, Fev/2018, Abr/2018'
            ],
            'Churn': ['N√£o', 'Sim', 'N√£o', 'Sim'],
            'Explica√ß√£o': [
                'Comprou em Julho (ap√≥s data de corte)',
                '√öltima compra em Mar√ßo (antes da data de corte)',
                'Comprou em Setembro (ap√≥s data de corte)',
                '√öltima compra em Abril (mesma data de corte, ainda √© churn)'
            ]
        })
        
        st.table(example_data)
        
        st.markdown("""
        <div style="background-color: #f0f2f6; padding: 20px; border-radius: 10px; margin-top: 20px;">
            <p><strong>Nota:</strong> A data de corte padr√£o √© 17 de abril de 2018. Clientes que n√£o fizeram compras
            ap√≥s essa data s√£o considerados como tendo abandonado (churn = 1).</p>
        </div>
        """, unsafe_allow_html=True)
        
    # TAB 2: CONFIGURAR AN√ÅLISE
    with tab2:
        st.header("‚öôÔ∏è Configurar An√°lise de Churn")
        
        # Layout em duas colunas para o formul√°rio
        col1, col2 = st.columns([2, 1])
        
        with col1:
            with st.form("churn_config_form"):
                st.subheader("üìã Par√¢metros da An√°lise")
                
                # Defini√ß√£o da data de corte
                cutoff_date = st.date_input(
                    "Data de Corte",
                    value=datetime(2018, 4, 17),
                    min_value=datetime(2017, 1, 1),
                    max_value=max_date.to_pydatetime()
                )
                
                # M√©todo de rebalanceamento
                col1, col2 = st.columns(2)
                with col1:
                    rebalance_method = st.selectbox(
                        "M√©todo de Rebalanceamento",
                        options=["smote", "undersample", "none"],
                        help="""
                        - SMOTE: Gera exemplos sint√©ticos da classe minorit√°ria
                        - Undersample: Remove exemplos da classe majorit√°ria
                        - None: N√£o realiza rebalanceamento
                        """
                    )
                
                with col2:
                    class_weight = st.selectbox(
                        "Peso das Classes",
                        options=["balanced", "none"],
                        help="""
                        - Balanced: Atribui pesos inversamente proporcionais √† frequ√™ncia da classe
                        - None: Sem pesos
                        """
                    )
                
                # Tipo de modelo
                model_type = st.selectbox(
                    "Tipo de Modelo",
                    options=["random_forest", "xgboost", "logistic_regression"],
                    help="""
                    - Random Forest: Conjunto de √°rvores de decis√£o
                    - XGBoost: Implementa√ß√£o de Gradient Boosting
                    - Logistic Regression: Regress√£o log√≠stica
                    """
                )
                
                # Valida√ß√£o cruzada
                col1, col2 = st.columns(2)
                with col1:
                    use_cv = st.number_input(
                        "N√∫mero de Folds para Valida√ß√£o Cruzada",
                        min_value=0,
                        max_value=10,
                        value=5,
                        help="0 para n√£o usar valida√ß√£o cruzada"
                    )
                
                with col2:
                    test_size = st.slider(
                        "Propor√ß√£o de Dados para Teste",
                        min_value=0.1,
                        max_value=0.5,
                        value=0.3,
                        step=0.05,
                        help="Porcentagem dos dados que ser√° usada para teste"
                    )
                
                # Op√ß√£o de grid search
                grid_search = st.checkbox(
                    "Realizar Grid Search",
                    value=False,
                    help="Busca exaustiva pelos melhores hiperpar√¢metros (pode demorar)"
                )
                
                # Bot√£o para executar a an√°lise
                submit_button = st.form_submit_button("üöÄ Executar An√°lise de Churn")
        
        with col2:
            st.subheader("‚ÑπÔ∏è Sobre os Par√¢metros")
            
            st.markdown("""
            <div style="background-color: #f0f2f6; padding: 20px; border-radius: 10px; margin-bottom: 20px;">
                <h4>Data de Corte</h4>
                <p>Define o ponto no tempo a partir do qual consideramos que um cliente abandonou o servi√ßo.</p>
                
                <h4>Rebalanceamento</h4>
                <p>M√©todos para lidar com o desequil√≠brio entre classes (churn vs. n√£o-churn).</p>
                
                <h4>Tipo de Modelo</h4>
                <p>Algoritmos de machine learning para prever o churn.</p>
                
                <h4>Valida√ß√£o Cruzada</h4>
                <p>M√©todo para avaliar a performance do modelo em diferentes subconjuntos dos dados.</p>
            </div>
            """, unsafe_allow_html=True)
            
            st.subheader("üìä Distribui√ß√£o Atual")
            
            # Calcular distribui√ß√£o atual de churn
            cutoff_date_obj = datetime.combine(cutoff_date, datetime.min.time())
            churn_df = define_churn(df, cutoff_date_obj)
            
            if 'churn' in churn_df.columns:
                churn_counts = churn_df['churn'].value_counts()
                total = churn_counts.sum()
                
                fig = go.Figure(data=[go.Pie(
                    labels=['N√£o Churn', 'Churn'],
                    values=[churn_counts.get(0, 0), churn_counts.get(1, 0)],
                    hole=.3,
                    marker_colors=['#3366CC', '#DC3912']
                )])
                
                fig.update_layout(
                    title_text=f"Distribui√ß√£o Atual de Churn (Baseado na data de corte selecionada)",
                )
                
                st.plotly_chart(fig, use_container_width=True)
                
                churn_rate = churn_counts.get(1, 0) / total * 100 if total > 0 else 0
                st.info(f"Taxa de churn atual: {churn_rate:.2f}%")
        
        if submit_button:
            # Formatar data e par√¢metros
            cutoff_date_str = cutoff_date.strftime("%Y-%m-%d")
            class_weight_param = "None" if class_weight == "none" else class_weight
            cv_param = 0 if use_cv == 0 else use_cv
            
            # Construir comando para executar o script
            grid_search_param = "--grid_search" if grid_search else ""
            
            command = f"""python churn_analysis.py \
                --cutoff_date {cutoff_date_str} \
                --rebalance {rebalance_method} \
                --model {model_type} \
                --class_weight {class_weight} \
                --cv {cv_param} \
                --test_size {test_size} \
                {grid_search_param}"""
            
            st.info(f"Executando an√°lise com o comando: `{command}`")
            
            # Aqui voc√™ pode executar o comando via subprocess, mas como estamos no Streamlit,
            # vamos apenas mostrar uma mensagem de progresso para simular a execu√ß√£o
            
            with st.spinner("Executando an√°lise de churn... (Este processo pode demorar alguns minutos)"):
                st.markdown("""
                <div style="background-color: #f0f2f6; padding: 20px; border-radius: 10px; margin-bottom: 20px;">
                    <p><strong>Nota:</strong> Em um ambiente de produ√ß√£o, este comando seria executado em segundo plano.</p>
                    <p>Para fins de demonstra√ß√£o, acesse o terminal e execute o comando acima manualmente.</p>
                </div>
                """, unsafe_allow_html=True)
                
                # Aqui voc√™ pode implementar a chamada real para o script de an√°lise
                # Por exemplo:
                # import subprocess
                # result = subprocess.run(command, shell=True, capture_output=True, text=True)
                # st.code(result.stdout)
                
                st.success("‚úÖ An√°lise conclu√≠da! Navegue para a aba 'Resultados do Modelo' para ver os resultados.")
                st.balloons()

    # TAB 3: RESULTADOS DO MODELO
    with tab3:
        st.header("üìà Resultados do Modelo de Churn")
        
        # Verificar se existe um modelo treinado
        if not os.path.exists('churn_analysis_results.txt'):
            st.warning("‚ö†Ô∏è Nenhum modelo foi treinado ainda. Acesse a aba 'Configurar An√°lise' para criar um modelo.")
        else:
            # Carregar resultados do arquivo
            with open('churn_analysis_results.txt', 'r') as f:
                results_text = f.read()
            
            # Extrair informa√ß√µes principais
            lines = results_text.split('\n')
            
            # Configura√ß√µes
            config_section = False
            configs = {}
            
            # M√©tricas de performance
            metrics_section = False
            metrics = {}
            
            # Distribui√ß√£o
            dist_section = False
            distribution = {}
            
            # Processar linhas do arquivo para extrair informa√ß√µes
            for line in lines:
                if line.startswith("Configura√ß√µes:"):
                    config_section = True
                    dist_section = False
                    metrics_section = False
                    continue
                elif line.startswith("Distribui√ß√£o de churn:"):
                    config_section = False
                    dist_section = True
                    metrics_section = False
                    continue
                elif line.startswith("M√©tricas de performance:"):
                    config_section = False
                    dist_section = False
                    metrics_section = True
                    continue
                elif line.strip() == "" or ":" not in line:
                    continue
                
                # Processar configura√ß√µes
                if config_section and ":" in line:
                    key, value = line.split(":", 1)
                    configs[key.strip()] = value.strip()
                
                # Processar distribui√ß√£o
                if dist_section and ":" in line:
                    key, value = line.split(":", 1)
                    if key.strip() in ["N√£o-churn (0)", "Churn (1)", "Taxa de churn"]:
                        distribution[key.strip()] = value.strip()
                
                # Processar m√©tricas
                if metrics_section and ":" in line:
                    key, value = line.split(":", 1)
                    if key.strip() in ["Accuracy", "Precision (weighted)", "Recall (weighted)", 
                                       "F1 (macro)", "F1 (weighted)", "AUC-ROC", "Average Precision Score"]:
                        metrics[key.strip()] = float(value.strip())
            
            # Layout em duas colunas para os resultados
            col1, col2 = st.columns([1, 1])
            
            with col1:
                # Exibir configura√ß√µes utilizadas
                st.subheader("‚öôÔ∏è Configura√ß√µes Utilizadas")
                config_df = pd.DataFrame({
                    "Par√¢metro": list(configs.keys()),
                    "Valor": list(configs.values())
                })
                st.table(config_df)
                
                # Exibir m√©tricas principais
                st.subheader("üìä M√©tricas de Performance")
                
                # Primeira linha de m√©tricas
                col1, col2, col3, col4 = st.columns(4)
                
                if "Accuracy" in metrics:
                    col1.metric("Accuracy", f"{metrics['Accuracy']:.4f}")
                if "Precision (weighted)" in metrics:
                    col2.metric("Precision", f"{metrics['Precision (weighted)']:.4f}")
                if "Recall (weighted)" in metrics:
                    col3.metric("Recall", f"{metrics['Recall (weighted)']:.4f}")
                if "F1 (weighted)" in metrics:
                    col4.metric("F1 Score", f"{metrics['F1 (weighted)']:.4f}")
                
                # Segunda linha de m√©tricas
                col1, col2 = st.columns(2)
                
                if "AUC-ROC" in metrics:
                    col1.metric("AUC-ROC", f"{metrics['AUC-ROC']:.4f}")
                if "Average Precision Score" in metrics:
                    col2.metric("Avg. Precision", f"{metrics['Average Precision Score']:.4f}")
                
                # Exibir distribui√ß√£o de churn
                st.subheader("üìà Distribui√ß√£o de Churn")
                
                if distribution:
                    # Extrair valores num√©ricos
                    try:
                        non_churn = int(distribution.get('N√£o-churn (0)', '0').replace(',', ''))
                        churn = int(distribution.get('Churn (1)', '0').replace(',', ''))
                        
                        # Criar gr√°fico de pizza
                        fig = go.Figure(data=[go.Pie(
                            labels=['N√£o Churn', 'Churn'],
                            values=[non_churn, churn],
                            hole=.3,
                            marker_colors=['#3366CC', '#DC3912']
                        )])
                        
                        fig.update_layout(
                            title_text=f"Distribui√ß√£o de Churn ({distribution.get('Taxa de churn', '')})",
                        )
                        
                        st.plotly_chart(fig, use_container_width=True)
                    except Exception as e:
                        st.error(f"Erro ao criar gr√°fico de distribui√ß√£o: {e}")
                        st.write(distribution)
            
            with col2:
                # Verificar se os arquivos de modelo existem
                if not os.path.exists('churn_model.pkl') or not os.path.exists('churn_analysis_plots.png'):
                    st.warning("‚ö†Ô∏è Arquivos do modelo ou gr√°ficos n√£o encontrados. Alguns resultados podem estar incompletos.")
                else:
                    # Exibir gr√°ficos salvos
                    st.subheader("üìä Gr√°ficos de Avalia√ß√£o")
                    
                    try:
                        # Tentar carregar e exibir a imagem dos gr√°ficos
                        st.image('churn_analysis_plots.png', use_column_width=True)
                    except Exception as e:
                        st.error(f"Erro ao carregar gr√°ficos: {e}")
                
                # Exibir relat√≥rio completo
                with st.expander("üìÑ Ver Relat√≥rio Completo"):
                    st.text(results_text)
                
                # Adicionar insights baseados nas m√©tricas
                st.subheader("üí° Insights")
                
                if "Accuracy" in metrics and "AUC-ROC" in metrics:
                    accuracy = metrics['Accuracy']
                    auc_roc = metrics['AUC-ROC']
                    
                    if accuracy > 0.9 and auc_roc > 0.8:
                        st.success("‚úÖ O modelo apresenta excelente performance, com alta precis√£o e capacidade de discrimina√ß√£o.")
                    elif accuracy > 0.8 and auc_roc > 0.7:
                        st.info("‚ÑπÔ∏è O modelo apresenta boa performance, mas h√° espa√ßo para melhorias.")
                    else:
                        st.warning("‚ö†Ô∏è O modelo apresenta performance abaixo do ideal. Considere ajustar os par√¢metros ou usar um algoritmo diferente.")
                
                # Adicionar recomenda√ß√µes
                st.subheader("üéØ Recomenda√ß√µes")
                
                if "Precision (weighted)" in metrics and "Recall (weighted)" in metrics:
                    precision = metrics['Precision (weighted)']
                    recall = metrics['Recall (weighted)']
                    
                    if precision > 0.8 and recall < 0.6:
                        st.info("‚ÑπÔ∏è O modelo tem alta precis√£o, mas baixa sensibilidade. Considere ajustar o threshold para capturar mais casos de churn.")
                    elif precision < 0.6 and recall > 0.8:
                        st.info("‚ÑπÔ∏è O modelo tem alta sensibilidade, mas baixa precis√£o. Considere ajustar o threshold para reduzir falsos positivos.")
                    elif precision < 0.6 and recall < 0.6:
                        st.warning("‚ö†Ô∏è O modelo tem baixa precis√£o e sensibilidade. Considere usar um algoritmo diferente ou ajustar os par√¢metros.")

    # TAB 4: PREVIS√ÉO
    with tab4:
        st.header("üîÆ Previs√£o de Churn")
        
        # Verificar se existe um modelo treinado
        if not os.path.exists('churn_model.pkl'):
            st.warning("‚ö†Ô∏è Nenhum modelo foi treinado ainda. Acesse a aba 'Configurar An√°lise' para criar um modelo.")
        else:
            # Layout em duas colunas
            col1, col2 = st.columns([2, 1])
            
            with col1:
                st.subheader("üìä Prever Churn para Novos Clientes")
                
                # Formul√°rio para entrada de dados
                with st.form("prediction_form"):
                    # Carregar o modelo e o scaler
                    with open('churn_model.pkl', 'rb') as f:
                        model = pickle.load(f)
                    
                    with open('churn_scaler.pkl', 'rb') as f:
                        scaler = pickle.load(f)
                    
                    with open('churn_feature_columns.pkl', 'rb') as f:
                        feature_columns = pickle.load(f)
                    
                    # Criar campos para entrada de dados
                    st.markdown("""
                    <div style="background-color: #f0f2f6; padding: 20px; border-radius: 10px; margin-bottom: 20px;">
                        <p>Preencha os dados do cliente para prever a probabilidade de churn.</p>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    # Criar campos para as features
                    input_data = {}
                    
                    # Dividir em duas colunas para melhor organiza√ß√£o
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        # Primeira metade das features
                        for i, feature in enumerate(feature_columns[:len(feature_columns)//2]):
                            if feature == 'recency':
                                input_data[feature] = st.number_input(
                                    f"Dias desde a √∫ltima compra ({feature})",
                                    min_value=0,
                                    max_value=365,
                                    value=30
                                )
                            elif feature == 'cancel_rate':
                                input_data[feature] = st.slider(
                                    f"Taxa de cancelamento ({feature})",
                                    min_value=0.0,
                                    max_value=1.0,
                                    value=0.1,
                                    step=0.05
                                )
                            else:
                                input_data[feature] = st.number_input(
                                    f"Valor para {feature}",
                                    value=0.0
                                )
                    
                    with col2:
                        # Segunda metade das features
                        for i, feature in enumerate(feature_columns[len(feature_columns)//2:]):
                            if feature == 'recency':
                                input_data[feature] = st.number_input(
                                    f"Dias desde a √∫ltima compra ({feature})",
                                    min_value=0,
                                    max_value=365,
                                    value=30
                                )
                            elif feature == 'cancel_rate':
                                input_data[feature] = st.slider(
                                    f"Taxa de cancelamento ({feature})",
                                    min_value=0.0,
                                    max_value=1.0,
                                    value=0.1,
                                    step=0.05
                                )
                            else:
                                input_data[feature] = st.number_input(
                                    f"Valor para {feature}",
                                    value=0.0
                                )
                    
                    # Bot√£o para fazer a previs√£o
                    predict_button = st.form_submit_button("üîÆ Prever Probabilidade de Churn")
                
                if predict_button:
                    # Criar DataFrame com os dados de entrada
                    input_df = pd.DataFrame([input_data])
                    
                    # Verificar se todas as features necess√°rias est√£o presentes
                    missing_features = [col for col in feature_columns if col not in input_df.columns]
                    if missing_features:
                        st.error(f"Faltam as seguintes features: {missing_features}")
                    else:
                        # Garantir que as colunas est√£o na mesma ordem que o modelo espera
                        input_df = input_df[feature_columns]
                        
                        # Aplicar o scaler
                        input_scaled = scaler.transform(input_df)
                        
                        # Fazer a previs√£o
                        prediction_proba = model.predict_proba(input_scaled)[0]
                        churn_probability = prediction_proba[1]  # Probabilidade de churn (classe 1)
                        
                        # Exibir o resultado
                        st.subheader("üìä Resultado da Previs√£o")
                        
                        # Criar um medidor visual para a probabilidade
                        fig = go.Figure(go.Indicator(
                            mode = "gauge+number",
                            value = churn_probability * 100,
                            domain = {'x': [0, 1], 'y': [0, 1]},
                            title = {'text': "Probabilidade de Churn (%)"},
                            gauge = {
                                'axis': {'range': [0, 100]},
                                'bar': {'color': "darkred"},
                                'steps': [
                                    {'range': [0, 30], 'color': "lightgreen"},
                                    {'range': [30, 70], 'color': "yellow"},
                                    {'range': [70, 100], 'color': "red"}
                                ],
                                'threshold': {
                                    'line': {'color': "black", 'width': 4},
                                    'thickness': 0.75,
                                    'value': churn_probability * 100
                                }
                            }
                        ))
                        
                        st.plotly_chart(fig, use_container_width=True)
                        
                        # Exibir recomenda√ß√£o baseada na probabilidade
                        if churn_probability < 0.3:
                            st.success(f"‚úÖ Baixa probabilidade de churn ({churn_probability:.2%}). Este cliente provavelmente continuar√° comprando.")
                        elif churn_probability < 0.7:
                            st.warning(f"‚ö†Ô∏è Probabilidade moderada de churn ({churn_probability:.2%}). Considere a√ß√µes de reten√ß√£o preventiva.")
                        else:
                            st.error(f"‚ùå Alta probabilidade de churn ({churn_probability:.2%}). A√ß√µes imediatas de reten√ß√£o s√£o recomendadas.")
            
            with col2:
                st.subheader("‚ÑπÔ∏è Sobre a Previs√£o")
                
                st.markdown("""
                <div style="background-color: #f0f2f6; padding: 20px; border-radius: 10px; margin-bottom: 20px;">
                    <h4>Como interpretar os resultados</h4>
                    <p>A previs√£o fornece a probabilidade de um cliente abandonar o servi√ßo (churn).</p>
                    <ul>
                        <li><strong>Baixa probabilidade (< 30%):</strong> Cliente com baixo risco de churn</li>
                        <li><strong>Probabilidade moderada (30-70%):</strong> Cliente com risco m√©dio de churn</li>
                        <li><strong>Alta probabilidade (> 70%):</strong> Cliente com alto risco de churn</li>
                    </ul>
                </div>
                """, unsafe_allow_html=True)
                
                st.subheader("üéØ A√ß√µes Recomendadas")
                
                st.markdown("""
                <div style="background-color: #f0f2f6; padding: 20px; border-radius: 10px; margin-bottom: 20px;">
                    <h4>Para clientes com alto risco de churn:</h4>
                    <ul>
                        <li>Ofertas personalizadas de desconto</li>
                        <li>Programas de fidelidade espec√≠ficos</li>
                        <li>Contato proativo da equipe de suporte</li>
                        <li>Recomenda√ß√µes personalizadas de produtos</li>
                    </ul>
                    
                    <h4>Para clientes com risco moderado:</h4>
                    <ul>
                        <li>Lembretes de produtos relacionados</li>
                        <li>Newsletters personalizadas</li>
                        <li>Programas de pontos ou cashback</li>
                    </ul>
                </div>
                """, unsafe_allow_html=True)

if __name__ == "__main__":
    app() 